#!/bin/bash

# BugBot - A debugging and bug reporting tool
# Usage: ./bugbot [command] [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
LOG_FILE="bugbot.log"
REPORT_DIR="bugbot-reports"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Function to check system health
check_system_health() {
    print_header "System Health Check"
    
    # Check disk space
    print_status "Checking disk space..."
    df -h | head -5
    
    # Check memory usage
    print_status "Checking memory usage..."
    free -h
    
    # Check running processes
    print_status "Checking running processes..."
    ps aux | head -10
    
    log_message "System health check completed"
}

# Function to check project status
check_project_status() {
    print_header "Project Status Check"
    
    # Check if we're in the right directory
    if [ ! -f "cms/pom.xml" ] && [ ! -f "frontend/package.json" ]; then
        print_error "Not in project root directory"
        return 1
    fi
    
    # Check CMS services
    if [ -d "cms" ]; then
        print_status "Checking CMS services..."
        cd cms
        
        # Check if Docker is running
        if docker ps >/dev/null 2>&1; then
            print_status "Docker is running"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        else
            print_warning "Docker is not running"
        fi
        
        # Check Maven dependencies
        if [ -f "pom.xml" ]; then
            print_status "Checking Maven dependencies..."
            ./mvnw dependency:tree | head -20
        fi
        
        cd ..
    fi
    
    # Check Frontend
    if [ -d "frontend" ]; then
        print_status "Checking Frontend..."
        cd frontend
        
        # Check Node.js version
        if command -v node >/dev/null 2>&1; then
            print_status "Node.js version: $(node --version)"
        else
            print_warning "Node.js not found"
        fi
        
        # Check npm dependencies
        if [ -f "package.json" ]; then
            print_status "Checking npm dependencies..."
            npm list --depth=0 2>/dev/null | head -10 || print_warning "npm dependencies not installed"
        fi
        
        cd ..
    fi
    
    log_message "Project status check completed"
}

# Function to collect logs
collect_logs() {
    print_header "Collecting Logs"
    
    mkdir -p "$REPORT_DIR"
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local report_file="$REPORT_DIR/bugbot_report_$timestamp.txt"
    
    {
        echo "BugBot Report - $(date)"
        echo "================================"
        echo ""
        
        echo "System Information:"
        echo "=================="
        uname -a
        echo ""
        
        echo "Environment Variables:"
        echo "===================="
        env | sort
        echo ""
        
        echo "Current Directory:"
        echo "================="
        pwd
        ls -la
        echo ""
        
        if [ -d "cms" ]; then
            echo "CMS Directory Contents:"
            echo "======================"
            ls -la cms/
            echo ""
        fi
        
        if [ -d "frontend" ]; then
            echo "Frontend Directory Contents:"
            echo "==========================="
            ls -la frontend/
            echo ""
        fi
        
    } > "$report_file"
    
    print_status "Logs collected in: $report_file"
    log_message "Logs collected in: $report_file"
}

# Function to run tests
run_tests() {
    print_header "Running Tests"
    
    # Run CMS tests if available
    if [ -d "cms" ] && [ -f "cms/pom.xml" ]; then
        print_status "Running CMS tests..."
        cd cms
        ./mvnw test || print_warning "CMS tests failed"
        cd ..
    fi
    
    # Run Frontend tests if available
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        print_status "Running Frontend tests..."
        cd frontend
        npm test || print_warning "Frontend tests failed"
        cd ..
    fi
    
    log_message "Tests completed"
}

# Function to start services
start_services() {
    print_header "Starting Services"
    
    # Start CMS services
    if [ -d "cms" ]; then
        print_status "Starting CMS services..."
        cd cms
        make infra-start || print_error "Failed to start CMS services"
        cd ..
    fi
    
    # Start Frontend
    if [ -d "frontend" ]; then
        print_status "Starting Frontend..."
        cd frontend
        npm start &
        cd ..
        print_status "Frontend started in background"
    fi
    
    log_message "Services started"
}

# Function to stop services
stop_services() {
    print_header "Stopping Services"
    
    # Stop CMS services
    if [ -d "cms" ]; then
        print_status "Stopping CMS services..."
        cd cms
        make infra-cleanup || print_warning "Failed to stop CMS services"
        cd ..
    fi
    
    # Stop Frontend
    print_status "Stopping Frontend..."
    pkill -f "ng serve" || print_warning "No Frontend process found"
    
    log_message "Services stopped"
}

# Function to show help
show_help() {
    echo "BugBot - Debugging and Bug Reporting Tool"
    echo ""
    echo "Usage: ./bugbot [command]"
    echo ""
    echo "Commands:"
    echo "  health     - Check system health"
    echo "  status     - Check project status"
    echo "  logs       - Collect logs and create report"
    echo "  test       - Run tests"
    echo "  start      - Start all services"
    echo "  stop       - Stop all services"
    echo "  restart    - Restart all services"
    echo "  help       - Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./bugbot health"
    echo "  ./bugbot status"
    echo "  ./bugbot logs"
    echo "  ./bugbot start"
}

# Main function
main() {
    local command="${1:-help}"
    
    # Initialize log file
    touch "$LOG_FILE"
    log_message "BugBot started with command: $command"
    
    case "$command" in
        "health")
            check_system_health
            ;;
        "status")
            check_project_status
            ;;
        "logs")
            collect_logs
            ;;
        "test")
            run_tests
            ;;
        "start")
            start_services
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            stop_services
            sleep 2
            start_services
            ;;
        "help"|*)
            show_help
            ;;
    esac
    
    log_message "BugBot completed command: $command"
}

# Run main function with all arguments
main "$@"